{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","robot","key","SearchBox","searchChange","placeholder","type","onChange","Scroll","props","style","overflowY","height","border","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","console","log","onSearchChange","searchField","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobot","requestRobots","dispatch","event","payload","target","value","fetch","then","res","json","data","catch","Boolean","window","location","hostname","match","initialSearchState","initialRobotsState","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.43bd5cdc.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className=\"tc dib pa3 ma2 grow br3 bg-light-blue shadow-5\">\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"robot\" />\n      <h2>{name}</h2>\n      <p>{email}</p>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return robots.map(robot => <Card key={robot.id} name={robot.name}\n    email={robot.email} id={robot.id} />);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"pa3\">\n      <input placeholder='Filter Robot'\n        type=\"search\"\n        className=\"pa2 ma3 ba3 bg-light-green\"\n        onChange={searchChange} />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div className=\"pt2\" style={{ overflowY: 'scroll', height: '73vh', border: '5px solid black' }}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Scroll;","import React, { Fragment, Component } from 'react'\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({\n      hasError: true\n    })\n  };\n\n  render() {\n    return this.state.hasError ? <h1>Opps this is not good.</h1> : (\n      <Fragment>\n        {this.props.children}\n      </Fragment>\n    );\n  }\n}\n\nexport default ErrorBoundry;","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry'\nimport './App.css';\nimport { searchChange, requestRobots } from '../actions'\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSearchChange: event => (dispatch(searchChange(event.target.value))),\n  onRequestRobots: () => dispatch(requestRobots())\n})\n\nconst mapStateToProps = state => ({\n  searchField: state.searchRobot.searchField,\n  robots: state.requestRobots.robots,\n  isPending: state.requestRobots.isPending\n})\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    console.log(this.props)\n    const { onSearchChange, searchField, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n      <Fragment>\n        <section className=\"tc\">\n          <h1 className=\"f1 ttu\">Robofriends</h1>\n          <SearchBox searchChange={onSearchChange} />\n          <Scroll>\n            {\n              isPending ? <h1>Loading</h1> :\n                <ErrorBoundry>\n                  <CardList robots={filteredRobots} />\n                </ErrorBoundry>\n            }\n          </Scroll>\n        </section>\n      </Fragment>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS\n} from './constants'\n\nexport const searchChange = text => ({\n  type: CHANGE_SEARCHFIELD,\n  payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING\n  })\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then(data => dispatch({\n      type: REQUEST_ROBOTS_SUCCESS,\n      payload: data\n    }))\n    .catch(error => dispatch({\n      type: REQUEST_ROBOTS_FAILED,\n      payload: error\n    }))\n}","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS\n} from './constants'\n\nconst initialSearchState = {\n  searchField: ''\n}\n\nexport const searchRobot = (state = initialSearchState, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCHFIELD:\n      return Object.assign({}, state, {\n        searchField: action.payload\n      })\n    default:\n      return state\n  }\n}\n\nconst initialRobotsState = {\n  robots: [],\n  isPending: true\n}\n\nexport const requestRobots = (state = initialRobotsState, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, {\n        isPending: true\n      })\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false\n      })\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload\n      })\n    default:\n      return state\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk'\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobot, requestRobots } from './reducers'\n\nconst rootReducers = combineReducers({ searchRobot, requestRobots })\n\nconst store = createStore(rootReducers, applyMiddleware(thunk))\n\nReactDOM.render(\n  <Provider store={store}>\n    < App />\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}